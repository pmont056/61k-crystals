def calc_atom_feature(atom):
    
    m = Chem.MolFromSmiles(atom)
    atom_len = m.GetNumAtoms()
    
    for n in range(atom_len):
        
        # One hot encode atoms

        if m.GetAtomWithIdx(n).GetSymbol() == 'H':
            feature = [1, 0, 0, 0, 0]
        elif m.GetAtomWithIdx(n).GetSymbol() == 'C':
            feature = [0, 1, 0, 0, 0]
        elif m.GetAtomWithIdx(n).GetSymbol() == 'O':
            feature = [0, 0, 1, 0, 0]
        elif m.GetAtomWithIdx(n).GetSymbol() == 'N':
            feature = [0, 0, 0, 1, 0]
        else:
            feature = [0, 0, 0, 0, 1]

        # One hot encode auxiliary features

        mol = Chem.AddHs(m)     # Adding hydrogens to the molecules
        at = mol.GetAtomWithIdx(n)

        feature.append(at.GetTotalNumHs() / 8)
        feature.append(at.GetTotalDegree() / 4)
        feature.append(at.GetFormalCharge() / 8)
        feature.append(at.GetTotalValence() / 8)
        feature.append(at.IsInRing() * 1)
        feature.append(at.GetIsAromatic() * 1)

        # Adding Chiral and Hybridization

        f = [0] * (len(Chiral) - 1)
        if Chiral.get(str(at.GetChiralTag()), 0) != 0:
            f[Chiral.get(str(at.GetChiralTag()), 0)] = 1
        feature.extend(f)

        f = [0] * (len(Hybridization) - 1)
        if Hybridization.get(str(at.GetHybridization()), 0) != 0:
            f[Hybridization.get(str(at.GetHybridization()), 0)] = 1
        feature.extend(f)

        return feature
