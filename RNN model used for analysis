model = Sequential()

# Embedding layer
model.add(
    Embedding(input_dim=100,
              input_length =1981,
              output_dim=1,
              trainable=True,
              mask_zero=False))


# Recurrent layer
model.add(LSTM(64, return_sequences=True,
               dropout=0.1, recurrent_dropout=0.1))
model.add(LSTM(32, return_sequences=False,
               dropout=0.1, recurrent_dropout=0.1))
    

# Fully connected layer
model.add(Dense(512, activation='sigmoid'))
model.add(Dense(256, activation='sigmoid'))
model.add(Dense(128, activation='sigmoid'))

# Dropout for regularization
model.add(Dropout(0.5))

# Output layer
model.add(Dense(1, activation='softmax'))

print(model.summary())
# Compile the model

sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.0, nesterov=True)
model.compile(loss='mean_squared_error', optimizer="Adam", metrics=['mean_squared_error'])

model.fit(
  X_train,
  y_train,
  epochs=2,
)
